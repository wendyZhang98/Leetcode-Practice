### Difficult Level: Medium
### Link: https://leetcode.com/problems/maximum-subarray/




### Description:
# Given an integer array nums
# find the contiguous subarray (containing at least one number) 
# which has the largest sum and return its sum
# A subarray is a contiguous part of an array




### Example:
# Example 1:
# Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
# Output: 6
# Explanation: [4,-1,2,1] has the largest sum = 6.

# Example 2:
# Input: nums = [1]
# Output: 1

# Example 3:
# Input: nums = [5,4,-1,7,8]
# Output: 23




### Algorithm1: Dynamic Programming
# 动态规划
# 动规五部曲如下：

# 1. 确定dp数组（dp table）以及下标的含义
# dp[i]：包括下标i之前的最大连续子序列和为dp[i]

# 2. 确定递推公式
# dp[i]只有两个方向可以推出来：
# dp[i-1] + nums[i]，即：nums[i]加入当前连续子序列和
# nums[i]，即：从头开始计算当前连续子序列和
# 一定是取最大的，所以dp[i] = max(dp[i-1] + nums[i], nums[i]);

# 3. dp数组如何初始化
# 从递推公式可以看出来dp[i]是依赖于dp[i-1]的状态，dp[0]就是递推公式的基础。
# dp[0]应该是多少呢?
# 根据dp[i]的定义，很明显dp[0]因为为nums[0]，即dp[0] = nums[0]。

# 4. 确定遍历顺序
# 递推公式中dp[i]依赖于dp[i-1]的状态，需要从前向后遍历。

# 5. 举例推导dp数组
# 以示例一为例，输入：nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]


### Solution1:
class Solution:
    def maxSubArray(self, nums):
        if len(nums) == 0:
            return 0
        dp = [0] * len(nums)
        dp[0] = nums[0]
        result = dp[0]
        for i in range(1, len(nums)):
            dp[i] = max(dp[i-1] + nums[i], nums[i])
            result = max(result, dp[i]) 
        return result

print(Solution().maxSubArray(nums=[1,2,3,-2,5]))



### Algorithm2: Greedy
# 贪心贪的是哪里呢？
# 如果 -2 1 在一起，计算起点的时候，一定是从1开始计算，因为负数只会拉低总和，这就是贪心贪的地方！

# 局部最优：当前“连续和”为负数的时候立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素“连续和”只会越来越小
# 全局最优：选取最大“连续和”

# 局部最优的情况下，并记录最大的“连续和”，可以推出全局最优。
# 从代码角度上来讲：遍历nums，从头开始用count累积，如果count一旦加上nums[i]变为负数
# 那么就应该从nums[i+1]开始从0累积count了，因为已经变为负数的count，只会拖累总和。

# 这相当于是暴力解法中的不断调整最大子序和区间的起始位置。
# 那有同学问了，区间终止位置不用调整么？ 如何才能得到最大“连续和”呢？

# 区间的终止位置，其实就是如果count取到最大值了，及时记录下来了。

### Solution2:
class Solution:
    def maxSubArray(self, nums):
        result = -float('inf')
        count = 0
        for i in range(len(nums)):
            count += nums[i]
            if count > result:
                result = count
            if count <= 0:
                count = 0
        return result
print(Solution().maxSubArray(nums=[1,2,3,-2,5]))
