### Difficult Level: Medium
### Link: https://practice.geeksforgeeks.org/problems/trapping-rain-water-1587115621/1




### Description:
# Given an array arr[] of N non-negative integers representing the height of blocks
# If width of each block is 1
# compute how much water can be trapped between the blocks during the rainy season




### Example:
# Input:
# N = 6
# arr[] = {3,0,0,2,0,4}
# Output:
# 10
# Explanation: 
# Link: https://practice.geeksforgeeks.org/problems/trapping-rain-water-1587115621/1




### Solution:
class Solution:
  def findWater(self, arr, n): 
  
    # left[i] contains height of tallest bar to the left of ith bar including itself. 
    left = [0]*n 
    # right[i] contains height of tallest bar to the right of ith bar including itself.
    right = [0]*n 

    water = 0
    # Storing values of tallest bar from first index till ith index.
    left[0] = arr[0] 
    for i in range(1, n): 
        left[i] = max(left[i-1], arr[i]) 

    # Storing values of tallest bar from last index till ith index.
    right[n-1] = arr[n-1] 
    for i in range(n-2, -1, -1): 
        right[i] = max(right[i+1], arr[i]); 

    # Storing the result by choosing the minimum of heights of tallest bar to
    # the right and left of the bar at current index and also subtracting the
    # value of current index to get water accumulated at current index.
    for i in range(0, n): 
        water += min(left[i], right[i]) - arr[i] 
    return water 
     
  def trappingWater(self, arr, n):
    return self.findWater(arr, n)

print(Solution().trappingWater(arr=[3,0,0,2,0,4], n=6))
