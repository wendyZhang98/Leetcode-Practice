### Link:
# https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0209.长度最小的子数组.md



### Description:
# 给定一个含有 n 个正整数的数组和一个正整数 s
# 找出该数组中满足其和 ≥ s 的长度最小的连续子数组，并返回其长度
# 如果不存在符合条件的子数组，返回 0



### Example:
# 输入：s = 7, nums = [2,3,1,2,4,3] 
# 输出：2 
# 解释：子数组 [4,3] 是该条件下的长度最小的子数组



### 滑动窗口：
# 不断调节子序列的起始位置和终止位置，从而得出我们要想的结果。
# 在本题中实现滑动窗口，主要确定如下三点：
# - 窗口内是什么？ - Answer：满足其和 ≥ s 的长度最小的连续子数组。
# - 如何移动窗口的起始位置？  - Answer：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。
# - 如何移动窗口的结束位置？  - Answer：窗口的结束位置就是遍历数组的指针，窗口的起始位置设置为数组的起始位置就可以了。

# 可以发现滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。
# 从而将$O(n^2)$的暴力解法降为$O(n)$。

# 时间复杂度：$O(n)$
# 空间复杂度：$O(1)$



### Solution:
class Solution:
    def minSubArrayLen(self, s, nums):
        res = float("inf")
        Sum = 0
        index = 0
        for i in range(len(nums)):
            Sum += nums[i]
            while Sum >= s:
                res = min(res, i-index+1)
                Sum -= nums[index]
                index += 1
        return 0 if res==float("inf") else res





