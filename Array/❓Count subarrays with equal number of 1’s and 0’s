### Difficult Level: Hard
### Link: https://practice.geeksforgeeks.org/problems/count-subarrays-with-equal-number-of-1s-and-0s-1587115620/1
### Link2: https://www.geeksforgeeks.org/count-subarrays-equal-number-1s-0s/



### Description:
# Given an array containing 0s and 1s. 
# Find the number of subarrays having equal number of 0s and 1s.

# Example 1:
# Input:
# n = 7
# A[] = {1,0,0,1,0,1,1}
# Output: 8
# Explanation: The index range for the 8 
# sub-arrays are: (0, 1), (2, 3), (0, 3), (3, 4), 
# (4, 5) ,(2, 5), (0, 5), (1, 6)

# Example 2:
# Input:
# n = 5
# A[] = {1,1,1,1,0}
# Output: 1
# Explanation: The index range for the 
# subarray is (3,4).




### Algorithm:
# Consider all 0’s in arr[] as -1.
# Create a hash table that holds the count of each sum[i] value, where sum[i] = sum(arr[0]+..+arr[i]), for i = 0 to n-1.
# Now start calculating the cumulative sum and then we get an incremental count of 1 for that sum represented as an index in the hash table. Arrays of each pair of positions with the same value in the cumulative sum constitute a continuous range with an equal number of 1’s and 0’s.
# Now traverse the hash table and get the frequency of each element in the hash table. 
# Let frequency be denoted as freq. 
# For each freq > 1 we can choose any two pairs of indices of a sub-array by (freq * (freq – 1)) / 2 number of ways.
# Do the same for all freq and sum up the result will be the number of all possible sub-arrays containing the equal number of 1’s and 0’s.
# Also, add freq of the sum of 0 to the hash table for the final result.




