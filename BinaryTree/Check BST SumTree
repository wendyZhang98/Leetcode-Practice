### Link：https://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-sumtree/
### Medium-Level



### Description:
# Write a function that returns true if the given Binary Tree is SumTree else false. 
# A SumTree is a Binary Tree where 
# the value of a node is equal to the sum of the nodes present in its left subtree and right subtree. 
# An empty tree is SumTree and the sum of an empty tree can be considered as 0. 
# A leaf node is also considered as SumTree. 



### Method 1 (Simple) 
# Get the sum of nodes in the left subtree and right subtree. 
# Check if the sum calculated is equal to the root’s data. 
# Also, recursively check if the left and right subtrees are SumTrees.


class node:
    def __init__(self, x):
        self.data = x
        self.left = None
        self.right = None
 
 
def sum(root):
    if root == None:
        return 0
    return sum(root.left) + root.data + sum(root.right)
 

def isSumTree(node):
    if node == None or node.left == None and node.right == None:
        return 1
        
    ls = sum(node.left)
    rs = sum(node.right)
 
    if node.data == ls + rs and isSumTree(node.left) and isSumTree(node.right)):
        return 1
 
    return 0


if __name__ == '__main__':
    root = node(26)
    root.left= node(10)
    root.right = node(3)
    root.left.left = node(4)
    root.left.right = node(6)
    root.right.right = node(3)
     
    if(isSumTree(root)):
        print("The given tree is a SumTree ")
    else:
        print("The given tree is not a SumTree ")
 


### Method2:(Tricky)
# Method 1 uses sum() to get the sum of nodes in left and right subtrees. 
# Method 2 uses the following rules to get the sum directly. 
# 1) If the node is a leaf node then the sum of the subtree rooted with this node is equal to the value of this node. 
# 2) If the node is not a leaf node then the sum of the subtree rooted with this node is twice the value of this node (Assuming that the tree rooted with this node is SumTree).


class node:
 
    def __init__(self, x):
        self.data = x
        self.left = None
        self.right = None
 
 
def isLeaf(node):
    if node == None:
        return 0
    if node.left == None and node.right == None:
        return 1
    return 0
 
 
def sum(root):
    if root == None:
        return 0
    return (sum(root.left) + root.data + sum(root.right))
 

def isSumTree(node):
    if node == None or isLeaf(node):
        return 1
 
    if isSumTree(node.left) and isSumTree(node.right):
        if node.left == None:
            ls = 0
        elif isLeaf(node.left):
            ls = node.left.data
        else:
            ls = 2 * node.left.data
 
        if(node.right == None):
            rs = 0
        elif(isLeaf(node.right)):
            rs = node.right.data
        else:
            rs = 2 * (node.right.data)
 
        return(node.data == ls + rs)
    return 0
 

if __name__ == '__main__':
 
    root = node(26)
    root.left = node(10)
    root.right = node(3)
    root.left.left = node(4)
    root.left.right = node(6)
    root.right.right = node(3)
 
    if(isSumTree(root)):
        print("The given tree is a SumTree ")
    else:
        print("The given tree is not a SumTree ")
 
