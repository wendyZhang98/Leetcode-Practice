### Diffucult Level: Easy
### Link: https://www.geeksforgeeks.org/check-for-children-sum-property-in-a-binary-tree/


### Description:
# Given a binary tree
# write a function that returns true if the tree satisfies below property
# For every node, data value must be equal to sum of data values in left and right children
# Consider data value as 0 for NULL children


### Algorithm: 
# Traverse the given binary tree
# For each node check (recursively) 
# if the node and both its children satisfy the Children Sum Property
# if so then return true else return false


### Implementation:
class newNode:
    def __init__(self, data):
      self.data = data
      self.left = None
      self.right = None
 
def isSumProperty(node):
  """
  returns 1 if children sum property
  holds for the given node and both
  of its children
  """
  left_data = 0
  right_data = 0
     
  # If node is None or it's a leaf node then return true
  if (node == None) or (node.left == None and node.right == None):
    return 1
    
  else:
    if node.left != None:
      left_data = node.left.data
    
    if node.right != None:
      right_data = node.right.data
     
    if (node.data == left_data + right_data) and isSumProperty(node.left) and isSumProperty(node.right):
      return 1
    else:
      return 0
 
# Driver Code
if __name__ == '__main__':
    root = newNode(10)
    root.left = newNode(8)
    root.right = newNode(2)
    root.left.left = newNode(3)
    root.left.right = newNode(5)
    root.right.right = newNode(2)
    if isSumProperty(root):
        print("The given tree satisfies the children sum property.")
    else:
        print("The given tree does not satisfy the children sum property.")
