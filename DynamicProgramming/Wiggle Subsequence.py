### Link:
# https://github.com/doocs/leetcode/blob/main/solution/0300-0399/0376.Wiggle%20Subsequence/README.md




### Description:
# 如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。
# 第一个差（如果存在的话）可能是正数或负数。
# 少于两个元素的序列也是摆动序列。

# 例如， [1,7,4,9,2,5] 是一个摆动序列，
# 因为差值 (6,-3,5,-7,3) 是正负交替出现的。

# 相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，
# 第一个序列是因为它的前两个差值都是正数，
# 第二个序列是因为它的最后一个差值为零。

# 给定一个整数序列，返回作为摆动序列的最长子序列的长度。
# 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，
# 剩下的元素保持其原始顺序。

# 进阶:
# 你能否用 O(n) 时间复杂度完成此题?





### Example:
# 输入: [1,7,4,9,2,5]
# 输出: 6
# 解释: 整个序列均为摆动序列。

# 输入: [1,17,5,10,13,15,10,5,16,8]
# 输出: 7
# 解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。

# 输入: [1,2,3,4,5,6,7,8,9]
# 输出: 2




### Solution:
### 动态规划
# 设 up 表示以前 i 个元素中的某一个元素结尾的最长上升摆动序列的长度
# down 表示以前 i 个元素中的某一个元素结尾的最长下降摆动序列的长度
# 初始 up = 1, down = 1

# 从数组下标 1 开始遍历：
# 若 nums[i] > nums[i - 1]，则需要更新最长上升摆动序列的长度：up = max(up, down + 1)
# 若 nums[i] < nums[i - 1]，则需要更新最长下降摆动序列的长度：down = max(down, up + 1)
# 最后返回 max(up, down) 即可

class Solution:
    def wiggleMaxLength(self, nums):
        up = down = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                up = max(up, down + 1)
            elif nums[i] < nums[i - 1]:
                down = max(down, up + 1)
        return max(up, down)

